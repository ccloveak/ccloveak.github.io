<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Preparation of New Project (1)</title>
      <link href="post/preparation-of-new-project-1/"/>
      <url>post/preparation-of-new-project-1/</url>
      
        <content type="html"><![CDATA[<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ol><li>vscode</li><li>node</li><li>typescript</li></ol><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><ol><li><code>npm init</code></li><li><code>npm install --save typescript</code></li><li><code>npx tsc --init</code></li></ol><h2 id="导入-ESLint-Prettier"><a href="#导入-ESLint-Prettier" class="headerlink" title="导入 ESLint + Prettier"></a>导入 ESLint + Prettier</h2><ol><li><code>npm install --save-dev eslint</code></li><li><code>npx eslint --init</code></li><li><code>npm install --save-dev prettier eslint-config-prettier</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// .eslintrc.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">/* ****** */</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">/* ****** */</span>    <span class="token string">"prettier"</span><span class="token punctuation">,</span> <span class="token comment">//最後に追加する</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ol><li>ESLint(<code>dbaeumer.vscode-eslint</code>)</li><li>Prettier(<code>esbenp.prettier-vscode</code>)</li></ol><h2 id="设定vscode"><a href="#设定vscode" class="headerlink" title="设定vscode"></a>设定vscode</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// .vscode/settings.json rootに</span><span class="token punctuation">{</span>  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>   <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://github.com/ccloveak/ts_project_demo">github repo</a></p>]]></content>
      
      
      <categories>
          
          <category> メモ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CICD With Github Action</title>
      <link href="post/cicd-with-github-action/"/>
      <url>post/cicd-with-github-action/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>test -&gt; build -&gt; deploy</li></ul><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ol><li>test： 用react自带的测试框架做单体测试</li><li>build：使用docker构建项目镜像，推送到docker hub</li><li>deploy：在EC2里停止当前容器，拉取最新镜像，重新起一个容器</li></ol><h2 id="实际开发"><a href="#实际开发" class="headerlink" title="实际开发"></a>实际开发</h2><ol><li>本地开发，本地服务器确认效果</li><li>推送到github，自动部署到服务器</li><li>可以通过公网访问页面</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/ccloveak/cicd-demo">github repo</a></p><h2 id="踩坑点"><a href="#踩坑点" class="headerlink" title="踩坑点"></a>踩坑点</h2><ol><li>docker多阶段构建，减小image大小</li><li>docker使用Access Tokens登陆</li><li>github action直接访问EC2</li><li>EC2安装docker</li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li>在cicd过程中加入e2e测试</li><li>通过AWS SSM进行部署</li></ol><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><ol><li>这些步骤其实之前都接触过，或者都已经写过博客，没有完整走一遍流程不知道自己哪里有欠缺。</li><li>英语是真的重要，一些报错都是根据错误内容来调整的，特别是连接EC2这块。</li><li>单纯前端上docker有点杀鸡用牛刀。不过都上了docker了，集成后端也是不难的。后端再连接云数据库，妥妥的cloud native。</li><li>github action，gitlab pipeline各有千秋吧，面向需求开发。</li></ol>]]></content>
      
      
      <categories>
          
          <category> インフラ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Docker </tag>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Mongodb with Docker</title>
      <link href="post/use-mongodb-with-docker/"/>
      <url>post/use-mongodb-with-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><a href="https://shengwei.innihon.com/post/start-mongodb-with-docker/">搭建完mongodb</a>后还漏了几个步骤，不能在本地使用</p><h2 id="STEP"><a href="#STEP" class="headerlink" title="STEP"></a>STEP</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 进入容器内部</span>docker <span class="token builtin class-name">exec</span> -it mongo <span class="token function">bash</span><span class="token comment"># 2. 下载vim</span><span class="token function">apt-get</span> update<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token comment"># 3. 修改配置文件</span><span class="token function">vim</span> /etc/mongod.conf.orig<span class="token comment"># bindIp: 127.0.0.1 -&gt; bindIp: 0.0.0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frontend Algorithm (1)</title>
      <link href="post/frontend-algorithm-1/"/>
      <url>post/frontend-algorithm-1/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>一个很朴素的需求，前端需要自己生成树结构的数据</li><li>直观上用递归应该更容易理解</li><li>不应该在追求性能的路上停下脚步</li></ul><h2 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'E'</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">arrayToTree</span><span class="token operator">=</span><span class="token punctuation">(</span>items<span class="token operator">:</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>parentId<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> result<span class="token operator">:</span><span class="token builtin">any</span><span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> itemMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// </span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> item<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">const</span> parentId <span class="token operator">=</span> item<span class="token punctuation">.</span>parentId<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      itemMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token punctuation">{</span>        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>    itemMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token punctuation">{</span>      <span class="token operator">...</span>item<span class="token punctuation">,</span>      children<span class="token operator">:</span> itemMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> treeItem <span class="token operator">=</span>  itemMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentId <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>itemMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        itemMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>parentId<span class="token punctuation">,</span><span class="token punctuation">{</span>          children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>      itemMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>treeItem<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><ul><li>我竟然开始追求起时间复杂度了，不容易啊。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码片段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project Summary (1)</title>
      <link href="post/project-summary-1/"/>
      <url>post/project-summary-1/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>记录自己的成长</li><li>反思一下哪里可以做的更好</li><li>总结下经验</li><li>小小的装一下</li></ul><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><ul><li>一个数据展示项目，主要是用echart</li><li>没有design，全靠自己对项目的理解做页面</li></ul><h2 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h2><ol><li>前端 1个</li><li>后端 1个</li><li>数据 1个</li></ol><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>next</li><li>jwt</li><li>echart api</li></ul><h2 id="经验感受"><a href="#经验感受" class="headerlink" title="经验感受"></a>经验感受</h2><ol><li>不了解后端水平的话，不要轻易定工期，谁定工期谁背锅</li><li>用typescript明确参数类型，后端少传或者没传的话可以有理有据</li><li>项目虽小，不要怕麻烦，颗粒度做到尽可能的细，方便后期修改，加功能</li><li>tailwind next真好用</li><li>我的审美确实不行，需要搭配个美工。。</li><li>坚持自己的观点，不要走野路子，出了问题明确责任。这个主要发生在前后端登陆状态保持这一块。</li><li>这段时间搭了next架构，用了echart相关的api，画面比较简单，没地方用算法，感觉退步了，需要空了刷刷算法。</li><li>基础打得牢，对之后开发有帮助，最直接的帮助是可以省下开发时间。</li><li>需要补一下后端相关知识，我只是知道后端的最佳实践，不明白具体细节，都不能跟后端argue，难受。</li><li>git很重要</li></ol>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 Plan</title>
      <link href="post/2022-plan/"/>
      <url>post/2022-plan/</url>
      
        <content type="html"><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><ol><li>赚钱</li><li>不是那么累的赚钱（身体累/心理累）</li><li>找对象</li><li>健康管理</li></ol><h2 id="skill-tree"><a href="#skill-tree" class="headerlink" title="skill tree"></a>skill tree</h2><ol><li>typescript</li><li>jest</li><li>storybook</li><li>playwright</li><li>next</li><li>react</li><li>tailwind</li><li>echart</li><li>gitlab</li><li>aws</li><li>k8s</li><li>python 爬虫</li><li>php wordpress</li></ol><h2 id="want-to-learn"><a href="#want-to-learn" class="headerlink" title="want to learn"></a>want to learn</h2><ol><li>go</li><li>python 自动交易</li><li>machine learning</li><li>web3.0</li></ol><h2 id="自我分析"><a href="#自我分析" class="headerlink" title="自我分析"></a>自我分析</h2><ol><li>我其实毫无审美可言，有design的话，根据设计图开发还可以（可以保证页面逻辑没有问题），自己设计那可真是要了我的老命，而且人跟人的审美还不一样，需要迎合别人的审美的时候，只能安慰自己，甲方爸爸给钱了。</li><li>适合当大厂螺丝钉，根据需求开发，厘清责任，用git保护自己</li><li>适合带前端团队，code review，需要组员水平在一定level之上</li><li>最近在学k8s，明显感到注意力不集中，如果不出意外的话，再自学个go，devops相关的学习只能从工作中去学了（转岗顺利的话）</li></ol><h2 id="1000万"><a href="#1000万" class="headerlink" title="1000万"></a>1000万</h2><h3 id="Plan-A"><a href="#Plan-A" class="headerlink" title="Plan A"></a>Plan A</h3><ul><li>做好本职工作，满足上司需求（next，echart）</li></ul><h3 id="Plan-B"><a href="#Plan-B" class="headerlink" title="Plan B"></a>Plan B</h3><ul><li>web自动化处理（playwright，node，python，mongodb，AWS，next）</li></ul><h3 id="Plan-C"><a href="#Plan-C" class="headerlink" title="Plan C"></a>Plan C</h3><ul><li>Landing page（tailwind，next）</li><li>Art portfolio（tailwind，next）</li></ul><h3 id="Plan-D"><a href="#Plan-D" class="headerlink" title="Plan D"></a>Plan D</h3><ul><li>交易机器人（python，AWS）<ul><li>FX</li><li>BTC</li></ul></li></ul><h2 id="赚钱之外"><a href="#赚钱之外" class="headerlink" title="赚钱之外"></a>赚钱之外</h2><h3 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h3><p>2022 开始个人事业主第一年，需要开始复试记账</p><h3 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h3><ol><li>前后端实现一个记账web system</li><li>用machine learning拍照自动记录明细（毕竟我学完了吴恩达的machine learning 虽然是Matlab的）</li><li>转成react native上架苹果店</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> メモ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Plan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 Annual Report</title>
      <link href="post/2021-annual-report/"/>
      <url>post/2021-annual-report/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>2021是充满感激的一年</li><li>2021是充实自己的一年</li></ol><h2 id="感激-感恩-感谢"><a href="#感激-感恩-感谢" class="headerlink" title="感激 感恩 感谢"></a>感激 感恩 感谢</h2><ol><li>张雷<ol><li>手把手教我react typescript jest</li><li>工作中让我挑战前端架构方面的工作</li><li>工作中让我挑战前端自动化方面的工作</li><li>工作中让我挑战前端E2E方面的工作</li><li>严格要求，提升对编码洁癖的追求</li><li>拔高程序员的基础，提升眼界</li><li>不管做人还是做事，都要实实在在，按照规则做事，用法律保护自己</li></ol></li><li>吴旭东<ol><li>请我干饭</li><li>喊我搞交易</li><li>喊我学英语</li><li>喊我学算法</li><li>向我传授人生经验</li></ol></li><li>现在公司的老板<ol><li>给了我一份不是很忙的工作，让我有时间思考技术层的边边角角</li><li>给了我一份薪水过得去的工作，让我不至于为钱委屈</li></ol></li><li>上家公司的同事<ol><li>向后端同事提需求，可以得到超出期望的反馈，后端宠着前端</li><li>向前端同事提问，可以得到超出期望的帮助，就差手把手教你写代码了</li><li>胸闷的时候还能找其他组的同事开解</li></ol></li></ol><h3 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h3><ol><li>在最近一次转职过程中，有其他公司的老板开的工资比现在的工资高，还说可以帮忙调整一下书面工资额来申请高度人才。。。实事求是，一次谎言需要一百次弥补。虽然现在工资少了，但是一切都是真实情况，安心。</li><li>目前的前端架构是我搭的，有个地方参考了之前的项目，弄的有点复杂，具体就是把请求类型返回类型都给加上了，讲道理不加也可以，下意识对自己严格要求了，果然后期扩张相对轻松</li><li>用上家公司学到知识，为现在的公司搭了一个小春网自动回复系统，相关技术 gitlab runner,gitlab ci/cd,playwright,node,有个难点是ci/cd过程中更新repository</li></ol><h2 id="生活-娱乐"><a href="#生活-娱乐" class="headerlink" title="生活 娱乐"></a>生活 娱乐</h2><ol><li>冲绳潜水</li><li>爬富士山</li><li>健身房会员</li><li>switch</li><li>dota2</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> メモ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Report </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frontend Permissions System</title>
      <link href="post/frontend-permissions-system/"/>
      <url>post/frontend-permissions-system/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>项目分大小，权限系统总共就这些东西</li><li>没想到从スマカン出来短短两个礼拜又从头到脚做了一遍前端权限</li><li>温故知新，下次再做权限相关的课题速度更快</li></ul><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><ol><li>主要依赖3个表 user，role，feature（功能级别的颗粒读）</li><li>通过role表管理 某个user可以使用哪些features</li></ol><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    roleId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">interface</span> <span class="token class-name">Role</span> <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">interface</span> <span class="token class-name">Feature</span> <span class="token punctuation">{</span>    features<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    roles<span class="token operator">:</span> Role<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="api需求"><a href="#api需求" class="headerlink" title="api需求"></a>api需求</h2><ul><li>向后端发请求的需求（从这部分切入到后端开发应该是个不错的选择）</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 获取用户</span><span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'/api/users'</span><span class="token punctuation">,</span> params<span class="token punctuation">;</span><span class="token comment">//params是检索条件</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> UserInfo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">// 新增用户</span><span class="token punctuation">{</span>    post<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'/api/users'</span><span class="token punctuation">,</span> UserInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> UserInfo<span class="token punctuation">}</span><span class="token comment">// 删除用户</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> id<span class="token punctuation">}</span><span class="token comment">// 编辑用户</span><span class="token punctuation">{</span>    put<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> UserInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> UserInfo<span class="token punctuation">}</span><span class="token comment">// 获取role</span><span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'/api/roles'</span><span class="token punctuation">,</span> params<span class="token punctuation">;</span><span class="token comment">//params是检索条件</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> Role<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">// 新增role</span><span class="token punctuation">{</span>    post<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'/api/roles'</span><span class="token punctuation">,</span> roleName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> Role<span class="token punctuation">}</span><span class="token comment">// 删除role</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/roles/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> id<span class="token punctuation">}</span><span class="token comment">// 编辑role</span><span class="token punctuation">{</span>    put<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/roles/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> Role<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> Role<span class="token punctuation">}</span><span class="token comment">// 这部分由后端控制，不需要新建，不能够删除</span><span class="token comment">// 获取feature</span><span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'/api/features'</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span>    response<span class="token operator">:</span> Feature<span class="token punctuation">}</span><span class="token comment">// 编辑feature 相当于新建了一套对应关系</span><span class="token punctuation">{</span>    put<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/api/features/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> params<span class="token punctuation">;</span><span class="token comment">// 一套新的对应关系</span>    <span class="token punctuation">}</span>    response<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><ol><li>前端在操作资源的时候还需要注意防抖</li><li>用户登陆的时候根据roleId获取feature，存到context里</li><li>访问资源，点击按钮根据context里的权限进行判断</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>TODO：用 后端express 前端next 服务器nginx 数据库 mongodb 写个跟权限控制相关的demo</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next Intensive Training</title>
      <link href="post/next-intensive-training/"/>
      <url>post/next-intensive-training/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>目前项目使用Next开发，我负责前端开发</li><li>想开发一个个人portfolio网站 前端Next，后端AWS lambda，架构 AWS</li><li>希望使用Next开发landing page</li><li>希望快速开发页面</li></ol><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><ol><li>使用Next tailwind 重构YouTube react项目<ol><li><a href="https://www.youtube.com/watch?v=UKdQjQX1Pko&amp;ab_channel=JavaScriptMastery">Build and Deploy a Google Maps Travel Companion Application | React.js</a> 未完成</li><li><a href="https://www.youtube.com/watch?v=MqDlsjc8GLo&amp;ab_channel=SonnySangha">Let’s build Hulu 2.0 with REACT.JS! (Next.js, Tailwind CSS, Responsive)</a> 未完成</li><li><a href="https://www.youtube.com/watch?v=CdDXbvBFXLY&amp;ab_channel=CoderCoder">Use the Google Maps API to build a custom map with markers</a> 未完成</li><li><a href="https://www.youtube.com/watch?v=Gbnjn-1Q2d8&amp;ab_channel=AdamLaMorre">NextJS Chat App - Build &amp; Deploy in 27 Minutes! </a> 未完成</li><li><a href="https://www.youtube.com/watch?v=iJ_MiYEgDiM&amp;t=3574s&amp;ab_channel=LeeRobinson">Building a Netflix Clone with Next.js, Tailwind CSS, and Next Auth</a> 未完成</li><li><a href="https://www.youtube.com/watch?v=zMXHYSqltmU&amp;t=1s&amp;ab_channel=ILWYennefer">Let’s build Disney+ with Tailwind CSS &amp; NEXT.JS! (Responsive, SSR React, Firebase &amp; TMDB API) </a> 未完成</li><li><a href="https://www.youtube.com/watch?v=FiGmAI5e91M&amp;t=2081s&amp;ab_channel=TraversyMedia">React &amp; Tailwind CSS Image Gallery</a> 未完成</li><li>Next官方demo学习</li></ol></li><li>通过以上项目了解部署，cloud function，api调用，数据获取等等</li><li>时间 2021.11.17 ～ 2022.1.31 10个Next以上Next项目</li></ol><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><ul><li>一个月开发重构部署4个Next projec</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>总结归纳适合自己的Next开发工具，开发流程，具体到库的使用配置，lint等等</li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>尝试学习Next 12新功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Next Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echart Tips &#39;Render Two Charts&#39;</title>
      <link href="post/echart-tips-render-two-charts/"/>
      <url>post/echart-tips-render-two-charts/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>时间紧，任务重，目前的项目用一个不是很优雅的方式渲染了两张关联性很强的chart</li><li>我轻微的代码洁癖</li></ul><h3 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h3><ul><li>在一张canvas画布里渲染两张图</li></ul><h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><ol><li>yAxis，xAxis 有一个gridIndex属性</li><li>grid支持穿对象数组</li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><ul><li>可以直接在echart的playground查看</li></ul><pre class="line-numbers language-TypeScript" data-language="TypeScript"><code class="language-TypeScript">option = {  legend: {},  tooltip: {},  dataset: {    source: [      ['product', '2012', '2013', '2014', '2015'],      ['Matcha Latte', 41.1, 30.4, 65.1, 53.3],      ['Milk Tea', 86.5, 92.1, 85.7, 83.1],      ['Cheese Cocoa', 24.1, 67.2, 79.5, 86.4]    ]  },  yAxis: [    { type: 'category', gridIndex: 0 },    { type: 'category', gridIndex: 1,axisLabel:{show:false} }  ],  xAxis: [{ gridIndex: 0 ,axisLabel:{show:false}}, { gridIndex: 1,axisLabel:{show:false}}],  grid: [{ left: '150px',right:"35%" },{ left: '65%',right:'0' }],  series: [    { type: 'bar', seriesLayoutBy: 'row' },    { type: 'bar', seriesLayoutBy: 'row' },    { type: 'bar', seriesLayoutBy: 'row' },    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 },    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 },    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 },    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 }  ]};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h3><ul><li>自己定制的乐趣真是其乐无穷。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEXT Tips &#39;render in Echart&#39;</title>
      <link href="post/next-tips-render-in-echart/"/>
      <url>post/next-tips-render-in-echart/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>有个需求需要在 echart的tooltip里进行跳转选项的选择</li><li>项目框架是 Next</li></ul><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>默认的tooltip只能用模版语言写html，虽然导入了tailwind，可以用tailwind画一个ui齐全的样式按钮，但是跳转只能通过a标签跳转，无法走next的link。</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在tooltip里用 <code>ReactDOM.render</code> 渲染一个react节点，这样可以就可以在tooltip里直接写react，可以在里面调用页面上定义的各种方法。</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">  <span class="token function-variable function">formatter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'toolTip'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>           <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>              <span class="token comment">// これは　react　code</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">,</span>            root          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token string">'&lt;div id="toolTip"&gt;&lt;/div&gt;'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echart </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEXT Tips &#39;image loader error&#39;</title>
      <link href="post/next-tips-image-loader-error/"/>
      <url>post/next-tips-image-loader-error/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>新的项目使用next开发，从头搭了一套next+ant design+tailwind开发框架，预感到会遇到奇奇怪怪的问题</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>在构建过程中出错(开发环境没有问题)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: Image Optimization using Next.js<span class="token punctuation">\</span>' default loader is not compatible with next export.Possible solutions:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// next.config.js</span><span class="token comment">// 添加下面代码</span>images<span class="token operator">:</span> <span class="token punctuation">{</span>    loader<span class="token operator">:</span> <span class="token string">"imgix"</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> <span class="token string">"https://noop/"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://github.com/vercel/next.js/issues/21079">github issue</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> NEXT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome Extension &#39;start&#39;</title>
      <link href="post/chrome-extension-start/"/>
      <url>post/chrome-extension-start/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在做sessionTimeout的时候被leader点拨加强<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window">Window</a>相关方面的知识</li><li>项目组后端大佬写了一个js方法，提升工作效率</li></ul><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul><li>YouTube</li><li>bilibili</li></ul><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p><a href="https://github.com/ccloveak/backlog_extension">github</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flag </tag>
            
            <tag> React </tag>
            
            <tag> Antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Tips &#39;reduce&#39;</title>
      <link href="post/javascript-tips-reduce/"/>
      <url>post/javascript-tips-reduce/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>又一次暴露我是个菜鸡的事实</li><li>一个小递归</li></ul><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">_reverse</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">?</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">re<span class="token punctuation">,</span> cu</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token function">_reverse</span><span class="token punctuation">(</span>cu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>re<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> array<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>javascript 才是最好的语言</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest Tips &#39;test promises&#39;</title>
      <link href="post/jest-tips-test-promises/"/>
      <url>post/jest-tips-test-promises/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>发现了同事写的测试有瑕疵，需要他改进测试方法</li><li>提供追加测试的具体方法</li></ul><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><ul><li>jest test promises <a href="https://jestjs.io/zh-Hans/docs/asynchronous">参考</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'the data is peanut butter'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'peanut butter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'the fetch fails with an error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>确实需要从各个纬度保证项目的健壮性</li><li>看一个同事，先看他代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
            <tag> Jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Tips &#39;inputRef&#39;</title>
      <link href="post/react-tips-inputref/"/>
      <url>post/react-tips-inputref/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>从 2周一次的 lightning talk学到的小技巧</li><li>通过ref定位到光标所在位置</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> position <span class="token operator">=</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>resizableTextArea<span class="token punctuation">.</span>textArea<span class="token punctuation">.</span>selectionStart<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>小黄姐牛逼到爆炸了</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest Tips &#39;test responsive&#39;</title>
      <link href="post/jest-tips-test-responsive/"/>
      <url>post/jest-tips-test-responsive/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>发现了同事写页面时候的一个小bug，需要他追加测试</li><li>在同事演示手机版时发现了另一个小bug，需要他再次追加测试</li><li>提供追加测试的具体方法</li></ul><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><ul><li><p>jest test responsive <a href="https://medium.com/@akilanoop/make-the-best-out-of-unit-testing-with-jest-and-react-testing-library-99f361c2ce0f">参考</a></p></li><li><p>错误对应 <a href="https://stackoverflow.com/questions/46221210/jest-enzyme-how-to-test-at-different-viewports/59307258#59307258">参考</a></p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'innerWidth'</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span>          writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           value<span class="token operator">:</span> <span class="token number">375</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>手把手保姆级贴身服务</li><li>操作工具人完成对项目品质的保障，我飘了，我飘了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
            <tag> Jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node Package &#39;spawnd&#39;</title>
      <link href="post/node-package-spawnd/"/>
      <url>post/node-package-spawnd/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>一个很朴素的e2e需求：启动服务器，进行e2e测试，关闭服务器</li><li>尝试过很多方法，还是从playwright的<a href="https://github.com/playwright-community/jest-playwright#start-a-server">官方配置</a>中找到了灵感 </li></ul><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><ol><li>playwright是通过spawnd来做服务器相关的进程管理的</li><li>Spawn a process inter-dependent with parent process.</li><li>我差点自己手动实现了一把 <a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess">child_process</a> 这是个深坑，还好找到了现成的轮子。</li><li>轮子的用法<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">serverOptions<span class="token operator">:</span> <span class="token punctuation">{</span>  command<span class="token operator">:</span> <span class="token string">'npm run start'</span><span class="token punctuation">,</span>  port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>改良的用法 （为了复用build产物，节约cpu）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  serverOptions<span class="token operator">:</span> <span class="token punctuation">{</span>    command<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http-server build -P https://example.com -p 3000</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>终极改良（手动实现一个简单的带proxy的node server）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  serverOptions<span class="token operator">:</span> <span class="token punctuation">{</span>    command<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">node server.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>我想一条路在前端走到黑的啊，这个不是我该看的啊喂。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
          <category> E2E </category>
          
      </categories>
      
      
        <tags>
            
            <tag> playwright </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp Tips &#39;Password&#39;</title>
      <link href="post/regexp-tips-password/"/>
      <url>post/regexp-tips-password/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>展示密码强度</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> PasswordRegExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'^(?=.*[a-zA-Z])(?=.*\\d)[a-zA-Z\\d\\W]{8,63}$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> AlphanumericRegExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'^(?=.*[a-zA-Z])(?=.*\\d)[!-~]+$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//英数字混在</span><span class="token keyword">const</span> UpperLowerLetterRegExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'^(?=.*[A-Z])(?=.*[a-z])[!-~]+$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大文字小文字混在</span><span class="token keyword">const</span> SymbolRegExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>    <span class="token string">"^(?=.*[!\"#$%&amp;''()\\^\\-@\\[;:\\],./|`{+*}&lt;&gt;?_])[!-~]+$"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//記号混在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><ul><li>escape-string-regexp npm包</li><li>转换后端（java）直接丢过来的正则</li><li>下面是核心代码：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">escapeStringRegexp</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> string <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Expected a string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// Escape characters with special meaning either inside or outside character sets.</span><span class="token comment">// Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.</span><span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[|\\{}()[\]^$+*?.]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'\\$&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'\\x2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E2E TEST</title>
      <link href="post/e2e-test/"/>
      <url>post/e2e-test/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>项目需要导入e2e测试</li><li>e2e测试整合到ci/cd pipeline</li></ul><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>playwright</li><li>typescript</li><li>create-react-app</li><li>node</li><li>docker</li><li>gitlab yml</li><li>bash</li><li>cross-env</li></ul><h2 id="大概步骤"><a href="#大概步骤" class="headerlink" title="大概步骤"></a>大概步骤</h2><ul><li>在根目录新建e2e文件夹</li><li>新建个e2e测试项目 参考<a href="https://github.com/playwright-community/playwright-jest-examples">playwright-jest-examples</a></li><li>修改 e2e文件夹里的package.json文件，绑定主项目的 yarn start</li><li>启动服务器，进行e2e测试，关闭服务器</li><li>修改 .gitlab-ci.yml  集成到ci/cd</li></ul><h2 id="具体细节"><a href="#具体细节" class="headerlink" title="具体细节"></a>具体细节</h2><ul><li>通过 cross-env 修改启动e2e服务器时候的环境变量</li><li>linux操作bash 重置e2e数据</li><li>.gitlab-ci.yml 为了e2e 专门建个stage</li><li>使用docker 配置gitlab的runner ，有个docker in docker的配置</li><li>node pm2相关</li><li>npm script中&amp;&amp;和&amp;</li><li>前端端口转发（通过环境变量选择转发的方向）</li><li>jest相关配置</li></ul><h2 id="用上的的-amp-没用上的代码"><a href="#用上的的-amp-没用上的代码" class="headerlink" title="用上的的&amp;没用上的代码"></a>用上的的&amp;没用上的代码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动node的容器 并且直接可以输入命令</span>docker run --name e2e -exec node:14 <span class="token function">tail</span> -f /dev/null<span class="token comment"># logs里找是否存在3000（端口）</span>pm2 logs e2e2 --lines <span class="token number">10</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token number">3000</span><span class="token comment"># pm2启动前端服务器</span>pm2 start <span class="token function">yarn</span> --name e2e -- e2e:start<span class="token comment"># 查看实时log</span><span class="token function">tail</span> -f -2 ~/.pm2/logs/e2e-out.log<span class="token comment"># 用bach访问一个容器内部</span>docker <span class="token builtin class-name">exec</span> -it e2e <span class="token function">bash</span><span class="token comment"># 3000端口被占用情况，lsof需要下载 apt-get install lsop</span><span class="token function">lsof</span> -i:3000<span class="token comment"># 直接向一个地址发请求</span><span class="token function">curl</span> --location --request GET <span class="token string">'https://example.com?token=exampletoken'</span> <span class="token punctuation">\</span>--header <span class="token string">'TOKEN: これはTOKEN'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h2><ul><li>在playwright官方提供的docker镜像基础上再添加一些项目的依赖，减少ci/cd的时间</li></ul><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><ul><li>满满的成就感</li></ul>]]></content>
      
      
      <categories>
          
          <category> E2E </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> playwright </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook &#39;useWindowSize&#39;</title>
      <link href="post/react-hook-usewindowsize/"/>
      <url>post/react-hook-usewindowsize/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>根据页面 size 展示不同的组件</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">getSize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">&gt;</span> <span class="token number">1000</span> <span class="token operator">?</span> <span class="token string">"large"</span> <span class="token operator">:</span> <span class="token string">"small"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">useWindowSize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>size<span class="token punctuation">,</span> setSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">Demo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">useWindowSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> size <span class="token operator">===</span> <span class="token string">"small"</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>SmallComponent <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>LargeComponent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关联知识点"><a href="#关联知识点" class="headerlink" title="关联知识点"></a>关联知识点</h2><ul><li>事件监听，移除事件监听</li><li>useEffect 里的 return</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mid-year Summary</title>
      <link href="post/mid-year-summary/"/>
      <url>post/mid-year-summary/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>对自己这段时间的工作生活做个总结</li></ul><h3 id="大概目录层次"><a href="#大概目录层次" class="headerlink" title="大概目录层次"></a>大概目录层次</h3><ol><li>最近在做什么</li><li>这半年做了什么，学到了哪些</li><li>下半年预计会做什么，打算加强哪方么样的面的积累</li><li>2021 年结束的时候理想的状态</li></ol><h2 id="今していること"><a href="#今していること" class="headerlink" title="今していること"></a>今していること</h2><ul><li><p>用 playwright 为项目搭建 e2e 测试框架 （已完成）</p><ul><li>难点是： 在不同的版本依赖中间，找到一个勉强能满足测试需求的平衡（jest, typescript）</li></ul></li><li><p>用 tailwind + antd 搭建适合艺术生展示作品的博客 （进行中）</p></li></ul><h2 id="この半年間に何をしました"><a href="#この半年間に何をしました" class="headerlink" title="この半年間に何をしました"></a>この半年間に何をしました</h2><ol><li>从国际化整理开始，了解项目是怎么实现国际化的</li><li>x-xsrf 的对应</li><li>storybook 的编写</li><li>unit test case 的编写</li><li>简单正则的编写</li><li>react-router 的使用</li><li>react hooks 的使用</li><li>编写自己的 hooks</li><li>用 antd protable 展示数据，那段时间疯狂看 antd 的 api 文档，给 antd 提 issue，向 antd 贡献了一个小改善</li><li>项目需要动态变色，看了一点 webpack 配置 <code>config-overrides.js</code>，简单来说是利用 less 实现动态变色</li><li>跟 10 有关的，利用 antd 的 icon 提供的方法，结合 iconfont，找到了一个特别舒爽方法来导入 icon，使用 icon。 <code>Symbol</code>。</li><li>使用 react-beautiful-dnd 实现了一个嵌套拖拽，不同父级分类的子分类之间可以任意拖拽，父级分类不能拖到子分类</li><li>前端渲染树，第一次真的用到递归。foreach 循环，for 循环等等性能上的优劣，以及代码的可读性。提取成 facet 通用组件。</li><li>隐约记得调了一部分 storybook 的设定，具体哪部分的忘了。。。</li><li>把 e2e 测试导入到项目内部，对比了 playwright，webdriverio，puppeteer,cypress。具体写了 playwright，webdriverio 两套代码。导入项目的过程中还踩了一些坑。</li><li>从项目里学到了 eslint prettier 配置，发布了一个脚手架工具 <a href="https://www.npmjs.com/package/just-react">just-react</a></li></ol><h2 id="下半期に何をするか、何を学びたいのか？"><a href="#下半期に何をするか、何を学びたいのか？" class="headerlink" title="下半期に何をするか、何を学びたいのか？"></a>下半期に何をするか、何を学びたいのか？</h2><ul><li>gitlab 工作流 ci/cd 流程</li><li>编写项目的 e2e test case</li><li>docker</li><li>SEO</li><li>Next.js</li><li>艺术生向的博客</li><li>aws lambda</li><li>一门后端框架 django 或者 express</li><li>一个自动交易机器人</li><li>网页自动化操作机器人，刷新页面，填写表单，提交表单</li><li>稍微接触一下前端性能优化</li></ul><h2 id="2021-年末の理想の姿"><a href="#2021-年末の理想の姿" class="headerlink" title="2021 年末の理想の姿"></a>2021 年末の理想の姿</h2><ul><li>升值（确定不是错别字） 加薪</li><li>2021 没有白过</li></ul>]]></content>
      
      
      <categories>
          
          <category> メモ </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node Tips &#39;update&#39;</title>
      <link href="post/node-tips-update/"/>
      <url>post/node-tips-update/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>项目导入playwright，playwright期望在node v14以上运行</li></ul><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>升级本地node版本</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>全局按照 ‘n’ <code>npm i -g -n</code></li><li>更新node版本 <code>n stable</code></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>有些坑升级下node的version可能就好了，莫名奇妙的好了那种。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> playwright </tag>
            
            <tag> Node </tag>
            
            <tag> E2E </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook &#39;useToggle&#39;</title>
      <link href="post/react-hook-usetoggle/"/>
      <url>post/react-hook-usetoggle/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>需要把一个按钮变成一个开关，点击展开，再点击闭合</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">[</span>expandedState<span class="token punctuation">,</span> toggleState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Button  onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">toggleState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    expandedState      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行全部展开的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行全部闭合的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>  <span class="token punctuation">{</span>expandedState <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Tooltip title<span class="token operator">=</span><span class="token string">"全部展开"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>UnFoldSvg className<span class="token operator">=</span><span class="token string">"icon"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Tooltip<span class="token operator">&gt;</span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Tooltip title<span class="token operator">=</span><span class="token string">"全部闭合"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>FoldSvg className<span class="token operator">=</span><span class="token string">"icon"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Tooltip<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>不重复造轮子能省下很多不必要的心智开销</li><li>react-use 真的好用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Theme</title>
      <link href="post/dynamic-theme/"/>
      <url>post/dynamic-theme/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>实现 web 端动态切换主题</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>需要实现这个有 2 个步骤</p><ol><li>监听 web 端某个属性，什么时候需要切换主题</li><li>切换主题的方法</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme</a></p></li><li><p>window.less.modifyVars</p></li><li><p>伪代码</p></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">window  <span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">"(prefers-color-scheme: dark)"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>    window<span class="token punctuation">.</span>less<span class="token punctuation">.</span><span class="token function">modifyVars</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      color<span class="token operator">:</span> color<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>window  <span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">"(prefers-color-scheme: dark)"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>    window<span class="token punctuation">.</span>less<span class="token punctuation">.</span><span class="token function">modifyVars</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      color<span class="token operator">:</span> color<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实操感受"><a href="#实操感受" class="headerlink" title="实操感受"></a>实操感受</h2><ul><li>配合 react useEffect 能玩出花</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> ES6 </tag>
            
            <tag> 工作经验 </tag>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM Publish Package (1)</title>
      <link href="post/npm-publish-package-1/"/>
      <url>post/npm-publish-package-1/</url>
      
        <content type="html"><![CDATA[<h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><ul><li><a href="https://www.npmjs.com/">npm</a> 包管理中心</li><li>npm发包 就是把自己写的js脚本（组件）共享出去</li></ul><h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h2><ul><li>让别人可以通过固定的方法，来使用你共享的组件（方法）</li><li>人人为我，我为人人</li><li>有能力的情况下，做点贡献，解放大家的生产力</li></ul><h2 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h2><ul><li>首先去npm上注册</li><li>其次在本地登陆 npm</li><li>在想要共享的文件下 输入 <code>npm publish</code></li></ul><h2 id="SAMPLE"><a href="#SAMPLE" class="headerlink" title="SAMPLE"></a>SAMPLE</h2><ul><li><a href="https://www.npmjs.com/package/just-react">just-react</a> 这是一个简单的react cli框架</li></ul><h2 id="系列说明"><a href="#系列说明" class="headerlink" title="系列说明"></a>系列说明</h2><ul><li>这个系列会详细介绍我发包用了哪些别人制作的插件</li><li>以及相关可能会用到的一些插件</li></ul>]]></content>
      
      
      <categories>
          
          <category> インフラ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook useSearchParam</title>
      <link href="post/react-hook-usesearchparam/"/>
      <url>post/react-hook-usesearchparam/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>今天帮同事排查storybook的问题，发现了这个hook</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>代码简单，逻辑清晰</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>对storybook不够友好</li><li>回过头来补充一下，这个缺点可能是我的缺点，需要配置下storybook。。。</li></ul><h2 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h2><ul><li>我现在取url上的参数是这么取的<ul><li>用了 <code>query-string</code> ,<code>react-router-dom</code> 这两个库</li></ul></li></ul><pre class="line-numbers language-TypeScript" data-language="TypeScript"><code class="language-TypeScript">const parsed = queryString.parse(location.search || '');const { filter: urlFilterStr } = parsed;const urlFilters: string = urlFilterStr ? String(urlFilterStr) : '{}';const formValueObj = JSON.parse(urlFilters);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同事使用 <code>useSearchParam</code>实现就显得比较清爽了</li></ul><pre class="line-numbers language-TypeScript" data-language="TypeScript"><code class="language-TypeScript">const filters = useSearchParam('filter');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="大胆猜想"><a href="#大胆猜想" class="headerlink" title="大胆猜想"></a>大胆猜想</h2><ul><li>感觉底层实现应该很类似，我多加了个初始值 <code>{}</code></li><li>实际场景里，url中不一定存在 <code>filter</code></li><li>感觉是<code>useSearchParam</code>的返回值有点晚了，storybook都是瞬间渲染的，所以取不到<code>useSearchParam()</code>的值</li></ul><h2 id="小心求证"><a href="#小心求证" class="headerlink" title="小心求证"></a>小心求证</h2><ul><li><a href="https://github.com/streamich/react-use/blob/master/src/useSearchParam.ts">useSearchParam实现</a></li><li>虽然看不懂他的实现方法，但是盲猜，他是需要经过<code>window.location</code>变化后才能取到值，尴尬的是storybook貌似没有模拟<code>window.location</code>的变化，可能有但是需要手动添加？！我察觉到这里貌似也有个大坑。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>配置storybook貌似也是个比较艰巨的任务。</li><li>如果不考虑某些方面的storybook的实现的话，使用<code>useSearchParam</code>是一个很不错的选择。</li><li>其实写完上面这段逻辑是想着自己写个hook优化一下的，奈何时间紧任务重，优先级比较低。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 696</title>
      <link href="post/leetcode-696/"/>
      <url>post/leetcode-696/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><ul><li><p>Give a string s, count the number of non-empty (contiguous) substrings that have the same number of 0’s and 1’s, and all the 0’s and all the 1’s in these substrings are grouped consecutively.</p></li><li><p>example</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Input<span class="token operator">:</span> <span class="token string">"00110011"</span>Output<span class="token operator">:</span> <span class="token number">6</span>Input<span class="token operator">:</span> <span class="token string">"10101"</span>Output<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">const countBinarySubstrings = (s: string): number =&gt; {    let result: number = 0;    let pre: number = 0;    let cur: number = 1;    for (let i = 0, len = s.length - 1; i &lt; len; i++) {        s[i] === s[i + 1] ? (cur += 1) : ((pre = cur), (cur = 1));        if (pre &gt;= cur) {            result += 1;        }    }    return result;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p><img src="LeetCode-696.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><code>pre</code>是上一个数字出现的次数</li><li><code>cur</code>是当前数字出现的次数</li><li>用了穷举法？，把每一位数符合条件的次数相加，返回<code>result</code></li></ol><h3 id="举个🌰-quot-00110-quot"><a href="#举个🌰-quot-00110-quot" class="headerlink" title="举个🌰 &quot;00110&quot;"></a>举个🌰 <code>"00110"</code></h3><ol><li>第0位 0  <code>pre = 0, cur = 0, result = 0</code></li><li>第1位 0  <code>pre = 0, cur = 2, result = 0</code></li><li>第2位 1  <code>pre = 2, cur = 1, result = 1</code></li><li>第3位 1  <code>pre = 2, cur = 2, result = 2</code></li><li>第4位 0  <code>pre = 2, cur = 1, result = 3</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Tips &#39;Install Gitlab&#39;</title>
      <link href="post/docker-tips-install-gitlab/"/>
      <url>post/docker-tips-install-gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>使用docker安装gitlab</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker run --detach <span class="token punctuation">\</span>  --hostname <span class="token number">18.179</span>.23.91 <span class="token punctuation">\</span>  --publish <span class="token number">443</span>:443 --publish <span class="token number">80</span>:80 --publish <span class="token number">222</span>:22 <span class="token punctuation">\</span>  --name gitlab <span class="token punctuation">\</span>  --restart always <span class="token punctuation">\</span>  --volume /srv/gitlab/config:/etc/gitlab <span class="token punctuation">\</span>  --volume /srv/gitlab/logs:/var/log/gitlab <span class="token punctuation">\</span>  --volume /srv/gitlab/data:/var/opt/gitlab <span class="token punctuation">\</span>  gitlab/gitlab-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-command"><a href="#docker-command" class="headerlink" title="docker command"></a>docker command</h2><ul><li>–detach：后台运行</li><li>–hostname：指定运行的 hostname，可以是域名也可以是 IP。</li><li>–publish：端口的映射，可以缩写成 -p</li><li>–name：容器的名称</li><li>–restart：重启的方式<ul><li>no：默认策略，在容器退出时不重启容器</li><li>on-failure：在容器非正常退出时（退出状态非 0），才会重启容器</li><li>on-failure:3：在容器非正常退出时重启容器，最多重启 3 次</li><li>always：在容器退出时总是重启容器</li><li>unless-stopped：在容器退出时总是重启容器，但是不考虑在 Docker 守护进程启动时就已经停止了的容器</li></ul></li><li>–volume：指定本地卷，配置、日志、数据，使用本地卷后，删除容器，不会删除配置、数据</li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="docker_gitlab.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>实例配置 2核4G</li><li>aws得编辑出站规则 默认出站规则只有ssh的20端口开放</li></ul>]]></content>
      
      
      <categories>
          
          <category> インフラ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Tips &#39;Install Docker&#39;</title>
      <link href="post/aws-tips-install-docker/"/>
      <url>post/aws-tips-install-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>装个docker就不用出了问题新建实例了</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol><li>更新实例上已安装的程序包和程序包缓存<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum update -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>安装最新的 Docker Engine 程序包<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动 Docker 服务<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> docker start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将 root 添加到 docker 组<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -a -G docker root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>解决 <code>WARNING: bridge-nf-call-iptables is disabled</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysctl.conf<span class="token comment"># sysctl.conf</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EC2-type"><a href="#EC2-type" class="headerlink" title="EC2 type"></a>EC2 type</h2></li></ol><ul><li>Amazon Linux 2 AMI (HVM), SSD Volume Type </li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.aws.amazon.com/zh_cn/AmazonECS/latest/developerguide/docker-basics.html">aws</a></li><li><a href="https://developer.aliyun.com/article/278801">aliyun</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> インフラ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MomentJs Tips (1)</title>
      <link href="post/momentjs-tips-1/"/>
      <url>post/momentjs-tips-1/</url>
      
        <content type="html"><![CDATA[<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><ul><li>有需求需要计算时差,并且对结果做一些定制化的美化</li></ul><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><ul><li>momentjs</li></ul><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">const currentDate = moment(new Date());// UTCTime は バックエンドからもらうconst targetDate = moment(UTCTime);const durationTime = moment.duration(currentDate.diff(targetDate));const days = duration.asDays();const months = duration.asMonths();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><a href="https://momentjs.com/docs/#/durations/">document</a></li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ul><li>中文社区环境确实差，无效信息多得想打人。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How To Create New Issue</title>
      <link href="post/how-to-create-new-issue/"/>
      <url>post/how-to-create-new-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>不会用antd的组件。。阅读理解不好，文档看不懂。</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a></li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>一个可复现的demo<ul><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/protable_from_issue">本地demo</a></li><li>codesandbox</li></ul></li></ul><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li>去官方的github仓库提issue</li><li>描述问题，描述需求</li><li>贴代码等待回答</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>注意语气，帮你是为爱发电，不帮是本分</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>new <a href="https://github.com/ant-design/pro-components/issues/1887">issue</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Tips &#39;ssh config&#39;</title>
      <link href="post/aws-tips-ssh-config/"/>
      <url>post/aws-tips-ssh-config/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>人为降低连接aws的复杂的</li><li>之前连接aws <code> ssh -i "aws.pem" ec2-user@ec2-54-178-64-65.ap-northeast-1.compute.amazonaws.com</code></li></ul><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><ul><li>在 ~/.ssh下创建config<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#  ~/.ssh/config</span>Host aws    HostName 这里是ip或者dns    User ec2-user    Port <span class="token number">22</span>    IdentityFile ~/.ssh/aws.pem    ServerAliveInterval <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2></li><li>目前连接aws <code>ssh aws</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> インフラ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack Tips (2)</title>
      <link href="post/webpack-tips-2/"/>
      <url>post/webpack-tips-2/</url>
      
        <content type="html"><![CDATA[<h2 id="メモ"><a href="#メモ" class="headerlink" title="メモ"></a>メモ</h2><ol><li><p>entry</p><ul><li>单入口 SPA <span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 字符串形式</li><li>多入口 对象 key-value形式</li></ul></li><li><p>output</p><ul><li>filename<ul><li>通过占位符确保文件名称唯一</li><li><code>'[name].js'</code> 这个name是1里多入口的key 单入口文件名是 <code>main.js</code></li></ul></li><li>path</li></ul></li><li><p>loaders</p><ul><li>module -&gt; rules</li><li>test 指定匹配规则</li><li>use 指定使用的loader名称</li></ul></li><li><p>Plugins<br><img src="plugins.png"></p></li><li><p>Mode</p></li><li><p>bable</p><ul><li>支持es6<ul><li><code>@babel/core @babel/preset-env babel-loader</code></li></ul></li><li>支持react<ul><li><code>react react-dom @babel/preset-react</code></li></ul></li></ul></li><li><p>解析css less</p><ul><li><code>style-loader css-loader less-loader</code></li></ul></li><li><p>解析图片</p><ul><li><code>file-loader</code>用于处理图片</li></ul></li><li><p>解析字体</p><ul><li><code>file-loader</code></li></ul></li><li><p>对 89 优化</p><ul><li><code>url-loader</code></li></ul></li><li><p>文件监听</p><ul><li>–watch</li><li>watch:true</li></ul></li><li><p>热更新</p><ul><li>webpack-dev-server</li><li>HotModuleReplacementPlugin</li><li><code>"dev": "webpack serve --mode development --hot-only" </code></li><li> 槽点满满 教程里的webpack版本是3 现在都5了。。改动有点大</li></ul></li><li><p>文件指纹</p><ul><li>hash<ul><li>path.join / path.resolve</li></ul></li><li>chunkhash<ul><li>主要对js</li></ul></li><li>contenthash<ul><li>主要对css</li><li><code>mini-css-extract-plugin</code></li><li>MiniCssExtractPlugin</li><li>图片的文件指纹 <img src="file_hash.png"></li><li>无法在热更新下使用</li></ul></li></ul></li><li><p>html 压缩</p><ul><li>html-webpack-plugin <img src="html_compression.png"></li></ul></li><li><p>css 压缩</p><ul><li>optimize-css-assets-webpack-plugin <img src="css_compression.png"></li></ul></li></ol><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><ul><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/webpack_demo/base_setting_demo">github</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>需要合理利用 stackoverflow github</li><li>不抛弃不放弃</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack Tips (1)</title>
      <link href="post/webpack-tips-1/"/>
      <url>post/webpack-tips-1/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>当前项目需要storybook显示画面</li><li>微调配置的时候发现webpack好薄弱啊</li><li>我是个task驱动型选手</li></ul><h2 id="学习途径"><a href="#学习途径" class="headerlink" title="学习途径"></a>学习途径</h2><ul><li>极客时间 视频课程<a href="https://time.geekbang.org/course/intro/100028901">玩转webpack</a><ul><li>强烈不推荐购买 这个视频课程是webpack3的 现在已经webpack5了</li></ul></li><li>gitchat</li><li>掘金</li></ul><h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><ul><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/webpack_demo/base_demo">github</a></li></ul><h2 id="メモ"><a href="#メモ" class="headerlink" title="メモ"></a>メモ</h2><ul><li>自动格式化</li><li>自动清除dist<ol><li>通过插件 clean-webpack-plugin <span class="github-emoji"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li><li>rm -rf ./dist &amp;&amp; webpack</li></ol></li><li>webpack打包 <code>yarn run build</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How To Use IconFont Icon</title>
      <link href="post/how-to-use-iconfont-icon/"/>
      <url>post/how-to-use-iconfont-icon/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>ant design <a href="https://ant.design/components/icon-cn/">icon</a>无法满足日益增长的icon需求</li><li>svg 图标跟原生的 antd组件适配性不好</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>使用iconfont提供的Symbol方法使用icon，管理icon，制作icon（有后两个需求，但是目前不是很迫切）</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><ul><li>‘Talk is cheap. Show me the code. ‘</li><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/react_icon">github</a></li></ul><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><ul><li>demo 只是展示了简单使用，开发的爽感只有实际开发才能体验</li><li>react antd 技术栈使用iconfont提供的Symbol方法真的是一个愉快的开发体验</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 工作经验 </tag>
            
            <tag> Icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Tips &#39;Upload File&#39;</title>
      <link href="post/aws-tips-upload-file/"/>
      <url>post/aws-tips-upload-file/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>需要往AWS上传文件</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol><li>home 下新建文件夹 upload <code>mkdir upload</code></li><li>调整权限 <code>chmod 0777 upload</code></li><li>密钥对所在文件夹上传文件 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -i <span class="token string">"aws.pem"</span> initNodejs.sh ec2-user@18.183.14.245:/home/upload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2></li></ol><ul><li>这个ip是自动生产的，貌似还能配弹性ip</li></ul>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Tips &#39;Set Root Passsword&#39;</title>
      <link href="post/aws-tips-set-root-passsword/"/>
      <url>post/aws-tips-set-root-passsword/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>通过 <code>*.pem</code> 登录aws ec2的时候，默认的不是root用户</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>为root用户创建密码<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2></li><li>有了root就能想干嘛干嘛了</li></ul>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook &#39;useMemo&#39;</title>
      <link href="post/react-hook-usememo/"/>
      <url>post/react-hook-usememo/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>第不知道几次看文档，应该更细致才能有收获</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>用useMemo优化代码加深理解</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/react_hook_usememo">github</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo">文档</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>我怀疑自己有强迫症，但是没有证据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode RegExp Tips &#39;Color&#39;</title>
      <link href="post/vscode-regexp-tips-color/"/>
      <url>post/vscode-regexp-tips-color/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>需要把代码中硬编码的颜色统一替换掉</li></ul><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><ul><li><code>#[0-9a-fA-F]{6}</code></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>当你在vscode搜索中发现常规正则不好用的时候，就该找找vscode是不是有自己的正则写法。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.microsoft.com/zh-cn/visualstudio/ide/using-regular-expressions-in-visual-studio?view=vs-2019">文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Tips &#39;git bisect&#39;</title>
      <link href="post/git-tips-git-bisect/"/>
      <url>post/git-tips-git-bisect/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>项目进行到一定程度，突然发现一个错误，而且这个错误还是在之前的某个提交产生的</li><li>项目leader向我推荐了 “git bisect”指令。。。</li><li>学名叫 “二分法找bug” – 沃・孜基・索得</li></ul><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol><li>找一个肯定没问题的提交 <code>start</code></li><li>找一个出问题的提交 <code>end</code></li><li><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> bisect start <span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>标记正常提交<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> bisect good<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>标记错误提交<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> bisect bad<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>重复 4 5 找到问题提交，预计会出现<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>问题提交<span class="token punctuation">]</span> is the first bad commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>退出查找<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> bisect reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2></li></ol><ul><li>你永远不知道会遇到那些神奇的问题</li><li>不要担心，这些坑前人已经踩过了，而且留下了解决方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Base DnD</title>
      <link href="post/react-base-dnd/"/>
      <url>post/react-base-dnd/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>项目中需要用到拖拽，package.json里已经有好几个插件了</li><li>在调包前想原生的实现一下拖拽</li></ul><h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2><ul><li>监听React鼠标事件</li><li>判断拖放开始结束</li><li>实现元素位置移动</li><li>维护拖放状态</li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><ul><li>‘Talk is cheap. Show me the code. ‘</li><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/react_base_dnd">github</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>极客时间 <a href="https://time.geekbang.org/course/detail/100009301-13596">React中拖放的实现</a></li></ul><h2 id="相关课题"><a href="#相关课题" class="headerlink" title="相关课题"></a>相关课题</h2><ul><li>react函数节流防抖</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Push With SSH</title>
      <link href="post/git-push-with-ssh/"/>
      <url>post/git-push-with-ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>有个需求是通过ssh连接github，必须是ssh</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>生成公私密钥（一路回车）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -b <span class="token number">4096</span> -C <span class="token string">"superstarzsw@gamil.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>读取公钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/.ssh<span class="token function">cat</span> id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>复制到<a href="https://github.com/settings/keys">github</a></p></li><li><p>测试连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">文档</a></li></ul><h2 id="本地信息"><a href="#本地信息" class="headerlink" title="本地信息"></a>本地信息</h2><ul><li>macOS</li></ul>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript Tips (2)</title>
      <link href="post/typescript-tips-2/"/>
      <url>post/typescript-tips-2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景（需求）"><a href="#背景（需求）" class="headerlink" title="背景（需求）"></a>背景（需求）</h2><ul><li>随着业务的复杂，简单命名感觉不够用了<ul><li>举个简单的例子: 都是table，为什么你可以叫<code>MemberTable</code>，我就得叫<code>***---...table</code></li></ul></li><li>命名不够用还有个副作用就是接口的名字也更难起了</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>虽然我们接口名字一样，但是从不同的文件引入应该不会有问题的吧？？？</li><li>那就要给接口加注释了。<strong>谁的接口，从哪来，想干嘛</strong>。。。</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>接口的注释，类型的注释最好用 <code>/**  */</code>的形式。</li><li>效果图<br><img src="ts-tips-2-img.png"></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>TypeScript真香。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tpyescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use 「英语轻松读」To Learn English</title>
      <link href="post/use-ying-yu-qing-song-du-to-learn-english/"/>
      <url>post/use-ying-yu-qing-song-du-to-learn-english/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>打开手机的 chrome 浏览器会给你推送一些文章</li><li>我看到一篇文章感觉有点意思，想先收藏一下以后看（看不看的以后再说）<ul><li><a href="https://www.freecodecamp.org/news/react-projects-you-should-build-this-year/">7 React Projects You Should Build in 2021</a> 这个标题对我来说就很有吸引力</li></ul></li></ul><p><img src="IMG_7742.PNG"></p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><ul><li>本来我是会通过微信发给自己的，然后今天想看看还有啥比文件传输助手更能督促自己学习的软件<ul><li>实不相瞒我在文件传输助手里存了好多学习资料了</li></ul></li><li>往下翻就发现了「英语轻松读」，一瞬间有点诧异，你这么牛逼么？出现啥网盘，啥keep的不奇怪，「英语轻松读」怎么会出现在这个位置。<br><img src="IMG_7744.PNG"></li><li>简直是发现了一个宝藏啊，下面两张图是使用前后的对比。<br><img src="IMG_7743.PNG"><br><img src="IMG_7745.PNG"></li><li>瞬间治好了（起码对这篇文章来讲）我把东西收藏后不看（存了等于看了）的坏毛病。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>除了用来学英语，还能用来读文章，特别是对我这种英语战五渣来讲。</li><li>这下阻挡我成为技术大神的最后一道门槛已经消失了。🎉🎉🎉</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语轻松读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Tips &#39;...props&#39;</title>
      <link href="post/react-tips-props/"/>
      <url>post/react-tips-props/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>看文档，特别是看第三方组件的文件，有很多都是什么什么透传</li><li>虽然知道怎么用，但是还是一脸蒙蔽，只能先跳过</li></ul><h2 id="透传"><a href="#透传" class="headerlink" title="透传"></a>透传</h2><ul><li>高阶组件收到父组件传来的props，从中拿到自己需要的props，再通过展开把剩下的props传给子组件</li><li><a href="https://zh-hans.reactjs.org/docs/higher-order-components.html#convention-pass-unrelated-props-through-to-wrapped-component">官方介绍</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>暴露了自己是个菜鸡的事实，hhhhhh</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Customize Hexo Background</title>
      <link href="post/customize-hexo-background/"/>
      <url>post/customize-hexo-background/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>怎么说也是做前端的，这么丑的界面有点受不了了</li><li>放松一下，对blog进行美化</li></ul><h2 id="踩坑步骤"><a href="#踩坑步骤" class="headerlink" title="踩坑步骤"></a>踩坑步骤</h2><ul><li>关闭图片</li><li>关闭动态背景</li><li>安装 <a href="https://github.com/ccloveak/canvas-nest.js/blob/master/README-zh.md">canvas-nest</a></li><li>拷贝 <code>node_modules/canvas-nest.js/dist/canvas-nest.js</code>。。。</li><li>然后发现貌似主题内置了 canvas-nest。。。hhhhh尴尬了</li><li>在主题设置里调一下canvas-nest的配置</li><li>具体操作细节在这次的commit里</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>朴素风</li><li>偶尔弄弄hexo还是有点意思的嘛</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript Tips (1)</title>
      <link href="post/typescript-tips-1/"/>
      <url>post/typescript-tips-1/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>工作中使用 typescript 感觉有欠缺的地方</li><li>重新过一遍 typescript 官方文档，希望能有收获</li></ul><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><ol><li><code>boolean</code></li></ol><ul><li>简单的 true/false 值</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">let isDone: boolean = false;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><code>number</code></li></ol><ul><li>支持十进制,十六进制,二进制,八进制字面量</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">let decLiteral: number = 6;             //十进制let hexLiteral: number = 0xf00d;        //十六进制let binaryLiteral: number = 0b1010;     //二进制let octalLiteral: number = 0o744;       //八进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>string</code></li></ol><ul><li>模版字符串</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">let name: string = `Gene`;let age: number = 37;let sentence: string = `Hello, my name is ${ name }.I'll be ${ age + 1 } years old next month.`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>数组 Array</li></ol><ul><li>在元素类型后面接上 []，表示由此类型元素组成的一个数组</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">let list: number[] = [1, 2, 3];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用数组泛型，Array&lt;元素类型&gt;</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">let list: Array&lt;number&gt; = [1, 2, 3];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>元组 Tuple</li></ol><ul><li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">// Declare a tuple typelet x: [string, number];// Initialize itx = ['hello', 10]; // OK// Initialize it incorrectlyx = [10, 'hello']; // Errorconsole.log(x[0].substr(1)); // OKconsole.log(x[1].substr(1)); // Error, 'number' does not have 'substr'x[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型console.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toStringx[6] = true; // Error, 布尔不是(string | number)类型// 这部分无法归纳总结，官网示例很详细了。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><code>enum</code></li></ol><ul><li>使用枚举类型可以为一组数值赋予友好的名字</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">enum Color {Red, Green, Blue}let c: Color = Color.Green;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">enum Color {Red = 1, Green = 2, Blue = 4}let c: Color = Color.Green;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">enum Color {Red = 1, Green, Blue}let colorName: string = Color[2];console.log(colorName);  // 显示'Green'因为上面代码里它的值是2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li><code>any</code></li></ol><ul><li>为在<strong>编程阶段</strong>还不清楚类型的变量指定一个类型</li><li>所以在请求合并前，不该有 any 类型存在</li></ul><ol start="8"><li><code>void</code></li></ol><ul><li>一个函数没有返回值时，其返回值类型是 <code>void</code></li><li>不要傻乎乎的去声明一个变量为 <code>void</code> 类型</li></ul><ol start="9"><li><code>null</code> 和 <code>undefined</code></li></ol><ul><li>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型</li><li>尽可能地使用 <code>--strictNullChecks</code></li><li>官网这里尽可能的想说明白，但是确实有点复杂。。。</li><li>留个印象，期待在看最佳实践的时候会恍然大悟。</li></ul><ol start="10"><li><code>never</code></li></ol><ul><li><code>never</code>类型表示的是那些永不存在的值的类型。</li><li>留个印象，期待在看最佳实践的时候会恍然大悟。</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">// 返回never的函数必须存在无法达到的终点function error(message: string): never {    throw new Error(message);}// 推断的返回值类型为neverfunction fail() {    return error("Something failed");}// 返回never的函数必须存在无法达到的终点function infiniteLoop(): never {    while (true) {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li><code>object</code></li></ol><ul><li><code>object</code>表示非原始类型</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">declare function create(o: object | null): void;create({ prop: 0 }); // OKcreate(null); // OKcreate(42); // Errorcreate("string"); // Errorcreate(false); // Errorcreate(undefined); // Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><ul><li>通过<em>类型断言</em>这种方式可以告诉编译器，“相信我，我能行，我知道自己在干什么”。</li><li>没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你已经进行了必须的检查</li></ul><ol><li>“尖括号”语法</li></ol><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">let someValue: any = "this is a string";let strLength: number = (&lt;string&gt;someValue).length;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><code>as</code>语法</li></ol><ul><li>在 TypeScript 里使用 JSX 时，只有 <code>as</code>语法断言是被允许的</li></ul><pre class="line-numbers language-Typescript" data-language="Typescript"><code class="language-Typescript">let someValue: any = "this is a string";let strLength: number = (someValue as string).length;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.tslang.cn/docs/handbook/basic-types.html">文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tpyescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Linux Commands (1)</title>
      <link href="post/basic-linux-commands-1/"/>
      <url>post/basic-linux-commands-1/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>前端开发者补充点Linux知识还是很有必要的</li><li>自己的小小小项目需要部署在树莓派或者aws（虽然只是停留在立案阶段）</li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol><li><code>cat</code></li></ol><ul><li>输出整个文件的内容（适用于查看小文件）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="2"><li><code>more</code></li></ol><ul><li>以分页的方式来显示内容，左下角显示百分比<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">more</span> 文件名            <span class="token comment"># 基本用法     </span><span class="token function">ls</span> -alh  /bin <span class="token operator">|</span> <span class="token function">more</span>  <span class="token comment"># 分屏显示 bin 目录下内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="3"><li><code>less</code></li></ol><ul><li>随意浏览文件，通过光标上下键查看所需内容<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">less</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="4"><li><code>head</code></li></ol><ul><li>显示文件开头某个数量的内容 (默认前 10 行)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">head</span>     <span class="token comment">#显示前 10 条进程</span><span class="token function">head</span> 文件名        <span class="token comment">#默认前 10 行</span><span class="token function">head</span> -n 文件名     <span class="token comment">#显示文件前 n 行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><code>tail</code></li></ol><ul><li>显示文件末尾某个数量的内容 (默认后 10 行)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> 文件名          <span class="token comment">#默认显示文件后 10 行</span><span class="token function">tail</span> -100 文件名     <span class="token comment">#显示后 100 行</span><span class="token function">tail</span> -f <span class="token number">100</span> 文件名   <span class="token comment">#循环读取新内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="6"><li><code>grep</code></li></ol><ul><li>文本过滤，用于查找文件里符合条件的字符串<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> 关键字 文件名        <span class="token comment">#搜索文件里关键字</span><span class="token function">grep</span> -v 关键字 文件名     <span class="token comment">#排除关键字内容显示</span><span class="token function">grep</span> hexo package.json  <span class="token comment">#查找 package.json 文件中的 hexo 关键字内容</span><span class="token comment">#据说egrep更好用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="7"><li><code>wc</code></li></ol><ul><li>文本统计，用于计算字数。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> 文件名          <span class="token comment">#统计文件字节数、字数、行数</span><span class="token function">wc</span> -l 文件名       <span class="token comment">#只统计文件行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="8"><li><code>sed</code></li></ol><ul><li>利用 script 处理文本内容，可以对文件内容进行替换、删除空白行等正则功能<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/yangyi/shengwei'</span> test.txt    <span class="token comment">#替换文件中 yangyi 为 shengwei</span><span class="token function">sed</span> 2g test.txt                     <span class="token comment">#删除文件第二行</span><span class="token function">sed</span> <span class="token string">'/^$/d'</span> test.txt                <span class="token comment">#删除空白行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="9"><li><code>uniq</code></li></ol><ul><li>删除文本重复行，用于检测和删除文本文件中重复出现的行列<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uniq</span> test.txt       <span class="token comment">#删除重复的行</span><span class="token function">uniq</span> -c test.txt    <span class="token comment">#统计重复的行</span><span class="token function">uniq</span> -d test.txt    <span class="token comment">#只显示重复的行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="10"><li><code>AWK</code></li></ol><ul><li>这个命令有点复杂，所以我会把<code>Linux基本命令</code>改成 <code>Linux基本命令（1）。。。</code></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>先初步学一下，预计折腾树莓派或者aws的时候会轻松不少。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Tips &#39;no-verify&#39;</title>
      <link href="post/git-tips-no-verify/"/>
      <url>post/git-tips-no-verify/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>开发阶段，需要绕过严格的代码检查</li></ul><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><ul><li><code>git commit --no-verify -m"这里是对提交的描述" </code></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>正式提交跟非正式提交之间的尺寸需要自己控制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Tips &#39;git stash&#39;</title>
      <link href="post/git-tips-git-stash/"/>
      <url>post/git-tips-git-stash/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>开始review代码，需要频繁切分支</li><li>当前的变更不想提交</li></ul><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><ol><li><code>git stash</code></li><li><code>git checkout 其他分支</code></li><li>做一些事情 <code>yarn storybook</code> , <code>yarn test</code> 等等</li><li><code>git checkout 之前工作分支</code></li><li><code>git stash pop</code></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>git真是啥功能都有 🎉</li><li>‘git stash’ 还有其他魔法操作，不过对我目前来说，现在这样够用了。<ul><li>我堕落了，我丧失了求知欲。。。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Mock Data</title>
      <link href="post/create-mock-data/"/>
      <url>post/create-mock-data/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>之前的开发都是在现成 api 的基础上的（可以通过 api 取数据）</li><li>现在暂时没有现成的 api，光等后端同学先提供 api 也不现实</li><li>storybook 展示页面也需要假数据</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>自己动手，丰衣足食。自己做假数据应该是最优解了。</li><li>利用 JS 中的 for 循环制作假数据</li></ul><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const members = [];for (let i = 0; i &lt; 20; i++) {    members[i] = {        id: i,        name: '大郎 吃了 '+ (i + 1).toString()+ ' 颗💊',        mail: (i &lt; 10 ? 'example' : 'test') + '@example.com',    };}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
            <tag> storybook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Download Antd Pro Blocks</title>
      <link href="post/download-pro-antd-demo/"/>
      <url>post/download-pro-antd-demo/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>想查看<a href="https://preview.pro.ant.design/dashboard/analysis">预览</a>的源代码</li><li>从仓库 clone 下来的是一个最基本的架子</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>下载 Ant Design Pro <code>git clone git@github.com:ant-design/ant-design-pro.git</code></li><li><code>yarn install</code></li><li><code>npm run fetch:blocks</code><br><img src="pro-blocks.png"></li></ol><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li>项目确实有点大(不过问题不大，主要是来看代码的)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Antd </tag>
            
            <tag> Ant Design Pro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Backend Development Environment</title>
      <link href="post/configure-development-environment-backend/"/>
      <url>post/configure-development-environment-backend/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>仿照前端 配置后端开发环境</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li><code>cp</code></li></ul><h2 id="基本款"><a href="#基本款" class="headerlink" title="基本款"></a>基本款</h2><ul><li>Nest</li><li>Typescript</li><li>Eslint</li><li>Prettier</li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><ul><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/backend_base_demo">github</a></li></ul><h2 id="感谢🙏"><a href="#感谢🙏" class="headerlink" title="感谢🙏"></a>感谢🙏</h2><ul><li>张雷 （Eslint配置 / Prettier 配置）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Frontend Development Environment</title>
      <link href="post/configure-development-environment-frontend/"/>
      <url>post/configure-development-environment-frontend/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>预计要写很多demo，每次都重新搭建有点痛苦</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>搭建个公用的开发环境，需要的时候 <code>cp</code> 一下</li></ul><h2 id="基本款"><a href="#基本款" class="headerlink" title="基本款"></a>基本款</h2><ul><li>antd</li><li>Typescript</li><li>Eslint</li><li>Prettier</li></ul><h2 id="vscode-插件"><a href="#vscode-插件" class="headerlink" title="vscode 插件"></a>vscode 插件</h2><ul><li>Eslint</li><li>Prettier</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6844903941503729678">掘金</a></li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><ul><li><a href="https://github.com/ccloveak/Components_Demo/tree/main/frontend_base_demo">github</a></li></ul><h2 id="感谢🙏"><a href="#感谢🙏" class="headerlink" title="感谢🙏"></a>感谢🙏</h2><ul><li>张雷 （Eslint配置 / Prettier 配置）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ant design </tag>
            
            <tag> react </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test with Puppeteer (1)</title>
      <link href="post/test-with-puppeteer-1/"/>
      <url>post/test-with-puppeteer-1/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>当前项目是使用Jest进行测试的</li><li>无法对ui组件进行测试</li><li>无法覆盖到文件的上传下载操作<ul><li>应该也是我对Jest理解不够造成的</li></ul></li></ul><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ul><li>在项目外对项目进行测试</li><li>Node相关的测试方案</li></ul><h2 id="方案选型"><a href="#方案选型" class="headerlink" title="方案选型"></a>方案选型</h2><ul><li><a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/#/">Puppeteer</a><!-- 多语言之后参考文档链接需要换掉--></li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol><li>输入操作&amp;元素点击<ul><li>type</li><li>click</li></ul></li><li>处理元素<ul><li>$eval</li></ul></li><li>处理多个元素<ul><li>$$()</li><li>$$eval()</li></ul></li><li>文件上传<ul><li>uploadFile</li></ul></li><li>iframe操作<ul><li>page.frames()</li></ul></li><li>拖拽验证码<ul><li>mouse</li></ul></li><li>快捷键操作<ul><li>page.keyborder</li></ul></li><li>浏览器tab页<ul><li>browser.waitForTarget</li></ul></li><li>alert窗口<ul><li>dialog</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://space.bilibili.com/306107070/channel/detail?cid=79090">bilibili</a><ul><li>万能的b站 给我力量</li></ul></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>虽然拿Puppeteer用来做测试，不过貌似改改可以变身爬虫。</li><li>柳暗花明又一村，可以把 Puppeteer整合到Jest中。<a href="https://jestjs.io/docs/en/puppeteer">Jest</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Work Balance</title>
      <link href="post/work-balance/"/>
      <url>post/work-balance/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>昨晚清github仓库有点爆肝了</li><li>将近2个星期没收拾屋子了</li><li>明天红日子，还能休息一天</li></ul><h2 id="清理项目"><a href="#清理项目" class="headerlink" title="清理项目"></a>清理项目</h2><ol><li>厨房<ul><li>灶台</li><li>放了很久的醋，酱油</li><li>煮了可乐生姜</li></ul></li><li>沙发<ul><li>清理长出来的衣服</li><li>用滚筒滚了3遍</li></ul></li><li>书<ul><li>重新整理了一遍</li></ul></li><li>衣服<ul><li>洗了两桶衣服</li></ul></li><li>工作台<ul><li>整理了一下杂物</li></ul></li><li>购物小票<ul><li>拍照存档</li><li>还没打标签（机器学习，自动记账）</li></ul></li><li>冰箱<ul><li>吃了很多存货</li></ul></li></ol><h2 id="耗时"><a href="#耗时" class="headerlink" title="耗时"></a>耗时</h2><ul><li>4小时</li></ul><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><ul><li>心情舒畅</li><li>清理了2袋垃圾</li></ul><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><ul><li>需要戴着口罩做清洁</li><li>清理了屋子，大大提升了生活品质</li><li>希望下个礼拜6也能收拾屋子，或者礼拜天<ul><li>应该需要重点清洁下卫生间</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 断舍离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clean Your Repo</title>
      <link href="post/clean-your-repo/"/>
      <url>post/clean-your-repo/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>当初少不更事，在github建了很多Repo，感觉自己很努力了</li><li>当前的仓库有很多是fork的。很多是以 <code>Study_</code>开头的，就学了一点点就放下了。</li><li>没有几个完整的项目或者完整的学习历史。</li><li>下面是已经清理了一次的仓库<ul><li><img src="cym_01.png"></li></ul></li><li>第三次清理github仓库<ul><li>效果显著</li><li><img src="cym_02.png"></li></ul></li><li>第四次清理github仓库 🎉<ul><li><img src="cym_03.png"></li></ul></li></ul><h2 id="清理方针"><a href="#清理方针" class="headerlink" title="清理方针"></a>清理方针</h2><ul><li>清理历史的fork<ul><li>回想下fork的目的</li><li>看下fork的项目当前的现状</li><li>把fork换成star</li></ul></li><li>清理不完整的repo<ul><li>重点 <code>Study_ *</code></li><li>合并notes，把笔记整合到blog上</li></ul></li></ul><h2 id="清理感受"><a href="#清理感受" class="headerlink" title="清理感受"></a>清理感受</h2><pre><code>* 有些仓库只是单纯的放在那* 不如转化为自己的知识，再输出到博客上* 我秃了，我强了* 能更清楚得掌握自己在那个时间段的情况</code></pre><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>用github向世界展示一个清晰的积极向上的自己<ul><li>自己的成长</li><li>自己的技能</li><li>自己的项目</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code-Optimization (2)</title>
      <link href="post/code-optimization-2/"/>
      <url>post/code-optimization-2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>对代码的优化过程中，有了一点小心得。</li></ul><h2 id="理想的函数"><a href="#理想的函数" class="headerlink" title="理想的函数"></a>理想的函数</h2><ol><li>清晰的定义</li><li>两三个参数</li><li>只做一件事</li></ol><ul><li>优化前<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//函数定义</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token parameter">pathname<span class="token operator">:</span> string<span class="token punctuation">,</span>    urlSort<span class="token operator">:</span> string<span class="token punctuation">,</span>    urlKeywords<span class="token operator">:</span> string<span class="token punctuation">,</span>    page<span class="token operator">:</span> number<span class="token punctuation">,</span>    pageSize<span class="token operator">:</span> number<span class="token punctuation">,</span>    keywords<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span>    sort<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> url<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sort <span class="token operator">&amp;&amp;</span> <span class="token function">setSortParam</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span> <span class="token operator">===</span> urlSort<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// handleChange向けのコード</span>        urlKeywords <span class="token operator">===</span> <span class="token string">'{}'</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>                  pathname <span class="token operator">+</span>                  <span class="token string">'?page='</span> <span class="token operator">+</span>                  page <span class="token operator">+</span>                  <span class="token string">'&amp;pagesize='</span> <span class="token operator">+</span>                  pageSize <span class="token operator">+</span>                  <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>                  <span class="token function">setSortParam</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>                  pathname <span class="token operator">+</span>                  <span class="token string">'?page='</span> <span class="token operator">+</span>                  page <span class="token operator">+</span>                  <span class="token string">'&amp;pagesize='</span> <span class="token operator">+</span>                  pageSize <span class="token operator">+</span>                  <span class="token string">'&amp;filter='</span> <span class="token operator">+</span>                  urlKeywords <span class="token operator">+</span>                  <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>                  <span class="token function">setSortParam</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sort <span class="token operator">&amp;&amp;</span> <span class="token function">setSortParam</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span> <span class="token operator">!==</span> urlSort<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//他のページからソート場合、自動的に１ページへ戻る</span>        urlKeywords <span class="token operator">===</span> <span class="token string">'{}'</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">=</span> pathname <span class="token operator">+</span> <span class="token string">'?page=1&amp;pagesize='</span> <span class="token operator">+</span> pageSize <span class="token operator">+</span> <span class="token string">'&amp;sort='</span> <span class="token operator">+</span> <span class="token function">setSortParam</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>                  pathname <span class="token operator">+</span>                  <span class="token string">'?page=1&amp;pagesize='</span> <span class="token operator">+</span>                  pageSize <span class="token operator">+</span>                  <span class="token string">'&amp;filter='</span> <span class="token operator">+</span>                  urlKeywords <span class="token operator">+</span>                  <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>                  <span class="token function">setSortParam</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sort <span class="token operator">&amp;&amp;</span> keywords<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// handleSearch向けのコード</span>        <span class="token comment">// 他のページから検索場合、自動的に１ページへ戻りたいのため、pageは１に設定</span>        url <span class="token operator">=</span>            pathname <span class="token operator">+</span>            <span class="token string">'?page='</span> <span class="token operator">+</span>            page <span class="token operator">+</span>            <span class="token string">'&amp;pagesize='</span> <span class="token operator">+</span>            pageSize <span class="token operator">+</span>            <span class="token string">'&amp;filter='</span> <span class="token operator">+</span>            keywords <span class="token operator">+</span>            <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>            urlSort<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        url <span class="token operator">=</span> pathname <span class="token operator">+</span> <span class="token string">'?page='</span> <span class="token operator">+</span> page <span class="token operator">+</span> <span class="token string">'&amp;pagesize='</span> <span class="token operator">+</span> pageSize <span class="token operator">+</span>        <span class="token string">'&amp;sort='</span> <span class="token operator">+</span> urlSort<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//函数调用</span><span class="token comment">//handleChange</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token function">setUrl</span><span class="token punctuation">(</span>        location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>        urlSort<span class="token punctuation">,</span>        filter<span class="token punctuation">,</span>        page<span class="token punctuation">,</span>        pageSize<span class="token punctuation">,</span>        <span class="token string">'{}'</span><span class="token punctuation">,</span>        sortParam<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//handleSearch</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token function">setUrl</span><span class="token punctuation">(</span>        location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>        urlSort<span class="token punctuation">,</span>        urlKeywords<span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        pageSize<span class="token punctuation">,</span>        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>keywordsObj<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>优化后<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//函数定义</span><span class="token keyword">type</span> <span class="token class-name">HandleChangeOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    pathname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    page<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    pageSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    urlFilters<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    oldSort<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    newSort<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">HandleSearchOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    pathname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    pageSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    filters<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    sort<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setHandleChangeUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> HandleChangeOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>newSort <span class="token operator">&amp;&amp;</span> <span class="token function">setSortParam</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>newSort<span class="token punctuation">)</span> <span class="token operator">===</span> args<span class="token punctuation">.</span>oldSort<span class="token punctuation">)</span> <span class="token punctuation">{</span>        args<span class="token punctuation">.</span>urlFilters <span class="token operator">===</span> <span class="token string">'{}'</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>                  args<span class="token punctuation">.</span>pathname <span class="token operator">+</span>                  <span class="token string">'?page='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>page <span class="token operator">+</span>                  <span class="token string">'&amp;pagesize='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>pageSize <span class="token operator">+</span>                  <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>oldSort<span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>                  args<span class="token punctuation">.</span>pathname <span class="token operator">+</span>                  <span class="token string">'?page='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>page <span class="token operator">+</span>                  <span class="token string">'&amp;pagesize='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>pageSize <span class="token operator">+</span>                  <span class="token string">'&amp;filter='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>urlFilters <span class="token operator">+</span>                  <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>oldSort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        args<span class="token punctuation">.</span>urlFilters <span class="token operator">===</span> <span class="token string">'{}'</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>                  args<span class="token punctuation">.</span>pathname <span class="token operator">+</span>                  <span class="token string">'?page=1&amp;pagesize='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>pageSize <span class="token operator">+</span>                  <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>                  <span class="token function">setSortParam</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>newSort<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>                  args<span class="token punctuation">.</span>pathname <span class="token operator">+</span>                  <span class="token string">'?page=1&amp;pagesize='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>pageSize <span class="token operator">+</span>                  <span class="token string">'&amp;filter='</span> <span class="token operator">+</span>                  args<span class="token punctuation">.</span>urlFilters <span class="token operator">+</span>                  <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>                  <span class="token function">setSortParam</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>newSort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setHandleSearchUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> HandleSearchOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> filterObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>filterObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filterObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span> filterObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filterObj<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> filterObj<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'all'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> filterObj<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filterObj<span class="token punctuation">[</span><span class="token string">'roleId'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> filterObj<span class="token punctuation">[</span><span class="token string">'roleId'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'all'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> filterObj<span class="token punctuation">[</span><span class="token string">'roleId'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> filterStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>filterObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterStr <span class="token operator">===</span> <span class="token string">'{}'</span>        <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">=</span> args<span class="token punctuation">.</span>pathname <span class="token operator">+</span> <span class="token string">'?page=1&amp;pagesize='</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>pageSize <span class="token operator">+</span> <span class="token string">'&amp;sort='</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>sort<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token punctuation">(</span>url <span class="token operator">=</span>              args<span class="token punctuation">.</span>pathname <span class="token operator">+</span>              <span class="token string">'?page=1&amp;pagesize='</span> <span class="token operator">+</span>              args<span class="token punctuation">.</span>pageSize <span class="token operator">+</span>              <span class="token string">'&amp;filter='</span> <span class="token operator">+</span>              filterStr <span class="token operator">+</span>              <span class="token string">'&amp;sort='</span> <span class="token operator">+</span>              args<span class="token punctuation">.</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//函数调用</span><span class="token comment">//handleChange</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token function">setHandleChangeUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        pathname<span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>        page<span class="token operator">:</span> page<span class="token punctuation">,</span>        pageSize<span class="token operator">:</span> pageSize<span class="token punctuation">,</span>        urlFilters<span class="token operator">:</span> filter<span class="token punctuation">,</span>        oldSort<span class="token operator">:</span> urlSort<span class="token punctuation">,</span>        newSort<span class="token operator">:</span> sort<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//handleSearch</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token function">setHandleSearchUrl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        pathname<span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>        pageSize<span class="token operator">:</span> urlPageSize<span class="token punctuation">,</span>        filters<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>filtersObj<span class="token punctuation">)</span><span class="token punctuation">,</span>        sort<span class="token operator">:</span> urlSort<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2></li><li>一开始的代码不够优雅很正常，先把功能实现了再通过层层迭代，逐渐优化</li><li>限于当时的认知写出了低质量的代码，视野开阔之后及时对代码进行重构</li><li>优化预定，虽然目前还不知方向在哪，有种在一亩三分地上疯狂耕耘的感觉</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Optimization </tag>
            
            <tag> ES6 </tag>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Optimization (1)</title>
      <link href="post/code-optimization-1/"/>
      <url>post/code-optimization-1/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>随着阅历（阅读代码经历）的增加，越来越觉得自己写得代码很垃圾。。。</li><li>计划对当前项目的代码做小范围的重构优化。</li></ul><h2 id="理想的命名"><a href="#理想的命名" class="headerlink" title="理想的命名"></a>理想的命名</h2><ol><li><p>有意义的可读的变量名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> currentDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY/MM/DD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> currentPage <span class="token operator">=</span> pagination<span class="token punctuation">[</span><span class="token string">'current'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>可搜索的变量名（不要为了炫技手动缩短变量名）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span>restart<span class="token punctuation">,</span> <span class="token number">86400000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// これはダメ。</span><span class="token comment">//声名为都是大写的常量</span><span class="token keyword">const</span> <span class="token constant">ONE_DAY</span> <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>restart<span class="token punctuation">,</span> <span class="token constant">ONE_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自解释的变量名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//可以猜出来contentRange是一串字符串</span><span class="token keyword">const</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span> pageStart<span class="token punctuation">,</span> pageEnd<span class="token punctuation">,</span> total<span class="token punctuation">]</span> <span class="token operator">=</span> contentRange<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>            <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+)-(\d+)\/(\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token punctuation">)</span> <span class="token keyword">as</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>合并功能一致的函数</p><ul><li>获取数据的时候可以一次性把数据都给获取了</li><li>不要这个地方要”name”了获取个”name”，那个地方要”id”了再获取个”id”<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getMemberId</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//do something</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">getMemberName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//do something</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getMemberInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//do something</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>无重复的语义清晰的变量名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">MemberTableProp</span> <span class="token punctuation">{</span>    members<span class="token operator">:</span> Member<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    searchMembers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">filters<span class="token operator">:</span> Store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    deleteMember<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">member<span class="token operator">:</span> Member</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    exportMembers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">encoding<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    importMembers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">formData<span class="token operator">:</span> FormData<span class="token punctuation">,</span> encoding<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    handleChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">page<span class="token operator">:</span> number<span class="token punctuation">,</span> pageSize<span class="token operator">:</span> number<span class="token punctuation">,</span> filters<span class="token operator">:</span> string<span class="token punctuation">,</span> sortParam<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">MemberTableProp</span> <span class="token punctuation">{</span>    members<span class="token operator">:</span> Member<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    handleSearch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">filters<span class="token operator">:</span> Store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    handleDelete<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">member<span class="token operator">:</span> Member</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    handleExport<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">encoding<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    handleImport<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">formData<span class="token operator">:</span> FormData<span class="token punctuation">,</span> encoding<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    handleChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">page<span class="token operator">:</span> number<span class="token punctuation">,</span> pageSize<span class="token operator">:</span> number<span class="token punctuation">,</span> filters<span class="token operator">:</span> string<span class="token punctuation">,</span> sortParam<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>整体风格统一的变量名</p></li><li><p>使用默认参数</p><ul><li>默认参数比短路逼格更高</li></ul></li><li><p><a href="https://github.com/unbug/codelf">CODELF</a></p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>随手把注释掉的代码删掉</li><li>现在用不上的代码以后也用不上</li><li>现在的代码肯定不能满足以后的需求</li><li>真的有那么一天需要这段代码了，可以根据文件历史找回代码(git)</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>写着写着，忽然发现当前代码可优化的地方不是很多，哈哈哈哈哈</li></ul>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Optimization </tag>
            
            <tag> ES6 </tag>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Two Scenarios with &#39;git rebase&#39;</title>
      <link href="post/two-scenarios-with-git-rebase/"/>
      <url>post/two-scenarios-with-git-rebase/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>新年上班第一天，本地master分支落后服务器master分支176个提交（我的同事好努力啊 ^_^ ）。<br><img src="img0.png"></li><li>放假前工作有些不够专心，在一个分支上有很多个提交(才没有，平常也是一个分支有很多提交的)。<br><img src="img1.png"></li></ul><h2 id="通过变基清理本地历史"><a href="#通过变基清理本地历史" class="headerlink" title="通过变基清理本地历史"></a>通过变基清理本地历史</h2><ol><li>修改默认的编辑器 （强烈推荐 atom）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.editor <span class="token string">'atom --wait'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>开始变基(从想合并的上一个提交开始)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase -i ad23981<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>操作前 <img src="img4.png"></li><li>操作后 <img src="img2.png">  </li></ul></li></ol><ul><li>r s p是什么<br><img src="img3.png"></li></ul><ol start="3"><li>第一次变基完成 🎉撒花🎉</li></ol><h2 id="通过变基解决合并冲突"><a href="#通过变基解决合并冲突" class="headerlink" title="通过变基解决合并冲突"></a>通过变基解决合并冲突</h2><ol><li><p>不管3721上来直接:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch<span class="token function">git</span> pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解决合并冲突</p></li><li><p>要是已经清理过本地的话不存在步骤3</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>暂存提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> add.<span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第二次变基完成 🎉撒花🎉<br><img src="img5.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ToWrite List</title>
      <link href="post/towrite-list/"/>
      <url>post/towrite-list/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>我是一个莫得感情得写作机器人</li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>把工作中，工作外学到的知识点小技巧总结一下</li><li>把现在想学的东西记下来，就算现在不学以后还是会学的<a href="http://news.sohu.com/20140717/n402350820.shtml">我今天不学明天也要学！</a></li></ul><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul><li>实时更新（想到idea了赶紧记下来）</li><li>素材来源包括不限于（微博，微信，gitchat）</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>Frontend</li><li>Backend</li><li>インフラ</li></ul><h2 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h2><ul><li><a href="../login-with-github/">第三方登录(github)</a></li><li><a href="../start-mongodb-with-docker/">Docker起mongodb</a></li><li><a href="../two-scenarios-with-git-rebase/">git rebase 两种常见场景</a></li><li><a href="../code-optimization-1/">代码优化（命名）</a></li><li><a href="../code-optimization-2/">代码优化（函数）</a></li><li><a href="../clean-your-repo/">优化github仓库</a></li><li><a href="./test-with-puppeteer-1/">Puppeteer系列 基本api</a></li><li><a href="./Configure-Development-Environment-Frontend">前端开发基础框架</a></li><li><a href="./configure-development-environment-backend/">后端开发基础框架</a></li><li><a href="./React-Base-DnD/">react原生拖放实现</a></li><li><a href="./How-To-Create-New-Issue/">github提issue</a></li></ul><h2 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h2><ul><li>antdesign使用(protable)</li><li>向某个开源项目提pr(antdesign)</li><li>ES6 <code>...rest</code> 参数使用</li><li>react中recaptcha使用 测试</li><li>用jest进行单元测试几个常见用法</li><li>nest实现简单的CURD</li><li>封装自己的ui组件（基于antdesign）</li><li>封装自己的hooks（在protable中使用）</li><li>前后端实现通过邮件重置密码</li><li>封装一个‘都道府県’的component</li><li>docker搭react开发环境，预期是拉个镜像下来直接能开发 <a href="https://www.infoq.cn/article/7C3mGBKGrgTUZfleyPSR">参考</a></li><li>webpack打包 <a href="https://time.geekbang.org/course/detail/100028901-97203">参考</a></li><li>ci/cd <a href="https://time.geekbang.org/column/intro/100009701">参考1</a> <a href="https://gitbook.cn/gitchat/activity/5f0c7152425b19297a0b91dc">参考2</a> <a href="https://gitbook.cn/gitchat/activity/5f2e0caaf22886680664880e">参考3</a><ul><li>docker <a href="https://weibo.com/ttarticle/p/show?id=2309404597186812838017">参考</a></li></ul></li><li>ts <a href="https://ts.xcatliu.com/">参考</a><a href="https://gitbook.cn/gitchat/activity/5e64555b2a44db63ee301b8e">参考1</a></li><li>ssh config配置</li><li>nest</li><li><a href="https://www.udemy.com/course/awesome-nextjs-with-react-and-node-amazing-portfolio-app/learn/">next</a></li><li>material ui</li><li>flutter</li><li><a href="https://time.geekbang.org/column/intro/100015201">k8s</a></li><li><a href="https://time.geekbang.org/course/detail/100040001-200160">mongodb</a></li><li>storybook</li><li><a href="https://amplication.com/">amplication</a></li><li><a href="https://github.com/karminski/write-a-programming-language-in-450-lines">write-a-programming-language-in-450-lines</a></li><li><a href="https://www.redhat.com/zh">redhat</a></li><li><a href="https://www.udemy.com/course/microservices-with-node-js-and-react/learn/">microservices</a></li><li><a href="https://time.geekbang.org/course/intro/100034001">swift</a></li><li>爬虫 <a href="https://gitbook.cn/gitchat/activity/5e82f2bea522722020792bf0">参考</a><a href="https://gitbook.cn/gitchat/activity/5e383bd03f10f05c6e7957cc">Node + TypeScript 实战肺炎疫情实时动态数据爬虫</a></li><li>leetcode</li><li>shell <a href="https://gitbook.cn/gitchat/activity/5e0d87c70f626b261ea342ec">脚本化部署 Web 项目，让你的部署更加简单、轻松、优雅！</a></li><li>推送服务 server酱</li></ul>]]></content>
      
      
      <categories>
          
          <category> メモ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TODO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start Mongodb with Docker</title>
      <link href="post/start-mongodb-with-docker/"/>
      <url>post/start-mongodb-with-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>mongodb改了共享协议，brew把mongodb给删了</li><li>直接安装mongodb需要踩很多坑</li><li>希望把时间花在具体业务上</li></ul><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol><li>终端<ul><li>敲命令的</li></ul></li><li>docker<ul><li>跑mongodb的</li></ul></li><li>MongoDB Compass<ul><li>看看mongodb有没有跑起来的</li></ul></li></ol><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li>拉取Mongo镜像<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>创建MongoDB专用的文件夹<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Documents<span class="token function">mkdir</span> mongodb<span class="token builtin class-name">cd</span> mongodb<span class="token function">mkdir</span> data backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>启动MongoDB(两个冒号前面的换成自己的路径)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name mongo -p <span class="token number">27017</span>:27017 -v /Users/zhangshengwei/Documents/mongodb/data:/data/db -v /Users/zhangshengwei/Documents/mongodb/backup:/data/backup -d mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>测试</li></ol><ul><li>用MongoDB Compass测试MongoDB是否正常工作<br><img src="testconnect.png"></li><li>🎉完结撒花🎉<br><img src="connectsuccess.png"></li></ul><h2 id="写作耗时"><a href="#写作耗时" class="headerlink" title="写作耗时"></a>写作耗时</h2><ul><li>1小时</li></ul>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Login with Github</title>
      <link href="post/login-with-github/"/>
      <url>post/login-with-github/</url>
      
        <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><ul><li>通过第三方进行登入</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="steps.png"></p><h2 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h2><ol><li>获取Code</li><li>用Code换AccessToken</li></ol><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li><p>在 <a href="https://github.com/settings/applications/new">GitHub</a> 上来创建 OAuth App</p><ul><li>Authorization callback URL 需要把login换成ghcallback</li><li>例如  <code>/users/login</code> -&gt; <code>/users/ghcallback</code><br><img src="step1.png"></li></ul></li><li><p>根据github的<a href="https://docs.github.com/en/free-pro-team@latest/developers/apps/authorizing-oauth-apps">OAuth文档</a>拼接请求链接</p><ul><li><p>建议使用encodeURIComponent() 拼接url</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://github.com/login/oauth/authorize'</span>     <span class="token operator">+</span> <span class="token string">'?client_id='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span> 之前获取的id <span class="token punctuation">)</span>     <span class="token operator">+</span> <span class="token string">'&amp;redirect_uri='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span> 授权成功后返回的地址 <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>授权成功后，会在回调的url的查询参数里找到code  🎉撒花🎉</p></li><li><p>通过axios发送post请求获取AccessToken  🎉撒花🎉</p><ul><li>步骤1获取的 <code>Client ID</code> &amp; <code>Client secrets</code> 和步骤3获取的code作为参数向github请求数据<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span> <span class="token string">'https://github.com/login/oauth/access_token'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="step2.png"></li></ul></li><li><p>通过AccessToken获取github的用户信息  🎉完结撒花🎉</p><ul><li><p>发送get请求获取用户信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">'https://api.github.com/user?access_token='</span><span class="token operator">+</span> AccessToken <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209581854">方糖新全栈·React+Node必修课</a></li><li><a href="https://docs.github.com/en/free-pro-team@latest/developers/apps/authorizing-oauth-apps">github文档</a></li></ul><h2 id="写作耗时"><a href="#写作耗时" class="headerlink" title="写作耗时"></a>写作耗时</h2><ul><li>3小时</li></ul>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021计划</title>
      <link href="post/2021-ji-hua/"/>
      <url>post/2021-ji-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li>每日日语<ul><li>n1</li><li>it passport</li></ul></li><li>每日英语<ul><li>托业 700</li></ul></li><li>每周一题Leetcode</li></ul><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><ul><li>每天减肥<ul><li>晚饭吃拉沙</li><li>65kg</li></ul></li><li>奶茶<ul><li>争取一礼拜一杯</li></ul></li><li>睡眠<ul><li>11点前睡，保证8小时睡眠</li></ul></li></ul><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul><li>Typescript</li><li>React</li><li>ant design</li><li>正则</li><li>优化代码</li></ul><h2 id="睡后收入"><a href="#睡后收入" class="headerlink" title="睡后收入"></a>睡后收入</h2><ul><li>微信小程序<ul><li>酒店预定</li><li>外卖下单</li></ul></li><li>爬虫<ul><li>supreme抽签</li></ul></li><li>比特币<ul><li>自动交易</li></ul></li><li>YouTube发视频</li></ul><h2 id="一人成军"><a href="#一人成军" class="headerlink" title="一人成军"></a>一人成军</h2><ul><li>树莓派<ul><li>Linux</li><li>个人服务器</li><li>个人vpn</li><li>NAS</li><li>个人git库</li></ul></li><li>AWS</li><li>Nest / Express</li></ul><p><img src="happynewyear.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flag </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
